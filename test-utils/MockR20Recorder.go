// Code generated by mockery. DO NOT EDIT.

package test_utils

import mock "github.com/stretchr/testify/mock"

// MockR20Recorder is an autogenerated mock type for the R20Recorder type
type MockR20Recorder struct {
	mock.Mock
}

type MockR20Recorder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockR20Recorder) EXPECT() *MockR20Recorder_Expecter {
	return &MockR20Recorder_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with given fields: r20Id
func (_m *MockR20Recorder) Start(r20Id string) error {
	ret := _m.Called(r20Id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(r20Id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockR20Recorder_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockR20Recorder_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - r20Id string
func (_e *MockR20Recorder_Expecter) Start(r20Id interface{}) *MockR20Recorder_Start_Call {
	return &MockR20Recorder_Start_Call{Call: _e.mock.On("Start", r20Id)}
}

func (_c *MockR20Recorder_Start_Call) Run(run func(r20Id string)) *MockR20Recorder_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockR20Recorder_Start_Call) Return(_a0 error) *MockR20Recorder_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockR20Recorder_Start_Call) RunAndReturn(run func(string) error) *MockR20Recorder_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: r20Id
func (_m *MockR20Recorder) Stop(r20Id string) (string, error) {
	ret := _m.Called(r20Id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(r20Id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(r20Id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(r20Id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockR20Recorder_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockR20Recorder_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - r20Id string
func (_e *MockR20Recorder_Expecter) Stop(r20Id interface{}) *MockR20Recorder_Stop_Call {
	return &MockR20Recorder_Stop_Call{Call: _e.mock.On("Stop", r20Id)}
}

func (_c *MockR20Recorder_Stop_Call) Run(run func(r20Id string)) *MockR20Recorder_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockR20Recorder_Stop_Call) Return(_a0 string, _a1 error) *MockR20Recorder_Stop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockR20Recorder_Stop_Call) RunAndReturn(run func(string) (string, error)) *MockR20Recorder_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockR20Recorder creates a new instance of MockR20Recorder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockR20Recorder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockR20Recorder {
	mock := &MockR20Recorder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
