// Code generated by mockery. DO NOT EDIT.

package test_utils

import (
	memory "record-orchestrator/pkg/memory"

	mock "github.com/stretchr/testify/mock"
)

// MockStateStore is an autogenerated mock type for the StateStore type
type MockStateStore struct {
	mock.Mock
}

type MockStateStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStateStore) EXPECT() *MockStateStore_Expecter {
	return &MockStateStore_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: key
func (_m *MockStateStore) Delete(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStateStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStateStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *MockStateStore_Expecter) Delete(key interface{}) *MockStateStore_Delete_Call {
	return &MockStateStore_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *MockStateStore_Delete_Call) Run(run func(key string)) *MockStateStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStateStore_Delete_Call) Return(_a0 error) *MockStateStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateStore_Delete_Call) RunAndReturn(run func(string) error) *MockStateStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockStateStore) Get(key string) (*memory.State, error) {
	ret := _m.Called(key)

	var r0 *memory.State
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*memory.State, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *memory.State); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*memory.State)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStateStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStateStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockStateStore_Expecter) Get(key interface{}) *MockStateStore_Get_Call {
	return &MockStateStore_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockStateStore_Get_Call) Run(run func(key string)) *MockStateStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStateStore_Get_Call) Return(_a0 *memory.State, _a1 error) *MockStateStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStateStore_Get_Call) RunAndReturn(run func(string) (*memory.State, error)) *MockStateStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: key, value
func (_m *MockStateStore) Save(key string, value memory.State) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, memory.State) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStateStore_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockStateStore_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - key string
//   - value memory.State
func (_e *MockStateStore_Expecter) Save(key interface{}, value interface{}) *MockStateStore_Save_Call {
	return &MockStateStore_Save_Call{Call: _e.mock.On("Save", key, value)}
}

func (_c *MockStateStore_Save_Call) Run(run func(key string, value memory.State)) *MockStateStore_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(memory.State))
	})
	return _c
}

func (_c *MockStateStore_Save_Call) Return(_a0 error) *MockStateStore_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateStore_Save_Call) RunAndReturn(run func(string, memory.State) error) *MockStateStore_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStateStore creates a new instance of MockStateStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateStore {
	mock := &MockStateStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
