// Code generated by mockery. DO NOT EDIT.

package test_utils

import mock "github.com/stretchr/testify/mock"

// MockDiscordRecorder is an autogenerated mock type for the DiscordRecorder type
type MockDiscordRecorder struct {
	mock.Mock
}

type MockDiscordRecorder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDiscordRecorder) EXPECT() *MockDiscordRecorder_Expecter {
	return &MockDiscordRecorder_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with given fields: vcId
func (_m *MockDiscordRecorder) Start(vcId string) error {
	ret := _m.Called(vcId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(vcId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscordRecorder_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockDiscordRecorder_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - vcId string
func (_e *MockDiscordRecorder_Expecter) Start(vcId interface{}) *MockDiscordRecorder_Start_Call {
	return &MockDiscordRecorder_Start_Call{Call: _e.mock.On("Start", vcId)}
}

func (_c *MockDiscordRecorder_Start_Call) Run(run func(vcId string)) *MockDiscordRecorder_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDiscordRecorder_Start_Call) Return(_a0 error) *MockDiscordRecorder_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscordRecorder_Start_Call) RunAndReturn(run func(string) error) *MockDiscordRecorder_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: vcId
func (_m *MockDiscordRecorder) Stop(vcId string) ([]string, error) {
	ret := _m.Called(vcId)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(vcId)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(vcId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(vcId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscordRecorder_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockDiscordRecorder_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - vcId string
func (_e *MockDiscordRecorder_Expecter) Stop(vcId interface{}) *MockDiscordRecorder_Stop_Call {
	return &MockDiscordRecorder_Stop_Call{Call: _e.mock.On("Stop", vcId)}
}

func (_c *MockDiscordRecorder_Stop_Call) Run(run func(vcId string)) *MockDiscordRecorder_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDiscordRecorder_Stop_Call) Return(_a0 []string, _a1 error) *MockDiscordRecorder_Stop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscordRecorder_Stop_Call) RunAndReturn(run func(string) ([]string, error)) *MockDiscordRecorder_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDiscordRecorder creates a new instance of MockDiscordRecorder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDiscordRecorder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDiscordRecorder {
	mock := &MockDiscordRecorder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
